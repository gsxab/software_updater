// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"software_updater/core/db/po"
)

func newVersion(db *gorm.DB, opts ...gen.DOOption) version {
	_version := version{}

	_version.versionDo.UseDB(db, opts...)
	_version.versionDo.UseModel(&po.Version{})

	tableName := _version.versionDo.TableName()
	_version.ALL = field.NewAsterisk(tableName)
	_version.ID = field.NewUint(tableName, "id")
	_version.CreatedAt = field.NewTime(tableName, "created_at")
	_version.UpdatedAt = field.NewTime(tableName, "updated_at")
	_version.DeletedAt = field.NewField(tableName, "deleted_at")
	_version.Name = field.NewString(tableName, "name")
	_version.Version = field.NewString(tableName, "version")
	_version.Filename = field.NewString(tableName, "filename")
	_version.Picture = field.NewString(tableName, "picture")
	_version.Link = field.NewString(tableName, "link")
	_version.Digest = field.NewString(tableName, "digest")
	_version.RemoteDate = field.NewTime(tableName, "remote_date")
	_version.LocalTime = field.NewTime(tableName, "local_time")
	_version.Previous = field.NewString(tableName, "previous_version")
	_version.CV = versionHasOneCV{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CV", "po.CurrentVersion"),
		Version: struct {
			field.RelationField
			CV struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CV.Version", "po.Version"),
			CV: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CV.Version.CV", "po.CurrentVersion"),
			},
		},
	}

	_version.fillFieldMap()

	return _version
}

type version struct {
	versionDo versionDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Name       field.String
	Version    field.String
	Filename   field.String
	Picture    field.String
	Link       field.String
	Digest     field.String
	RemoteDate field.Time
	LocalTime  field.Time
	Previous   field.String
	CV         versionHasOneCV

	fieldMap map[string]field.Expr
}

func (v version) Table(newTableName string) *version {
	v.versionDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v version) As(alias string) *version {
	v.versionDo.DO = *(v.versionDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *version) updateTableName(table string) *version {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Name = field.NewString(table, "name")
	v.Version = field.NewString(table, "version")
	v.Filename = field.NewString(table, "filename")
	v.Picture = field.NewString(table, "picture")
	v.Link = field.NewString(table, "link")
	v.Digest = field.NewString(table, "digest")
	v.RemoteDate = field.NewTime(table, "remote_date")
	v.LocalTime = field.NewTime(table, "local_time")
	v.Previous = field.NewString(table, "previous_version")

	v.fillFieldMap()

	return v
}

func (v *version) WithContext(ctx context.Context) IVersionDo { return v.versionDo.WithContext(ctx) }

func (v version) TableName() string { return v.versionDo.TableName() }

func (v version) Alias() string { return v.versionDo.Alias() }

func (v *version) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *version) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 14)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["name"] = v.Name
	v.fieldMap["version"] = v.Version
	v.fieldMap["filename"] = v.Filename
	v.fieldMap["picture"] = v.Picture
	v.fieldMap["link"] = v.Link
	v.fieldMap["digest"] = v.Digest
	v.fieldMap["remote_date"] = v.RemoteDate
	v.fieldMap["local_time"] = v.LocalTime
	v.fieldMap["previous_version"] = v.Previous

}

func (v version) clone(db *gorm.DB) version {
	v.versionDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v version) replaceDB(db *gorm.DB) version {
	v.versionDo.ReplaceDB(db)
	return v
}

type versionHasOneCV struct {
	db *gorm.DB

	field.RelationField

	Version struct {
		field.RelationField
		CV struct {
			field.RelationField
		}
	}
}

func (a versionHasOneCV) Where(conds ...field.Expr) *versionHasOneCV {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a versionHasOneCV) WithContext(ctx context.Context) *versionHasOneCV {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a versionHasOneCV) Model(m *po.Version) *versionHasOneCVTx {
	return &versionHasOneCVTx{a.db.Model(m).Association(a.Name())}
}

type versionHasOneCVTx struct{ tx *gorm.Association }

func (a versionHasOneCVTx) Find() (result *po.CurrentVersion, err error) {
	return result, a.tx.Find(&result)
}

func (a versionHasOneCVTx) Append(values ...*po.CurrentVersion) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a versionHasOneCVTx) Replace(values ...*po.CurrentVersion) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a versionHasOneCVTx) Delete(values ...*po.CurrentVersion) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a versionHasOneCVTx) Clear() error {
	return a.tx.Clear()
}

func (a versionHasOneCVTx) Count() int64 {
	return a.tx.Count()
}

type versionDo struct{ gen.DO }

type IVersionDo interface {
	gen.SubQuery
	Debug() IVersionDo
	WithContext(ctx context.Context) IVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVersionDo
	WriteDB() IVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVersionDo
	Not(conds ...gen.Condition) IVersionDo
	Or(conds ...gen.Condition) IVersionDo
	Select(conds ...field.Expr) IVersionDo
	Where(conds ...gen.Condition) IVersionDo
	Order(conds ...field.Expr) IVersionDo
	Distinct(cols ...field.Expr) IVersionDo
	Omit(cols ...field.Expr) IVersionDo
	Join(table schema.Tabler, on ...field.Expr) IVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVersionDo
	Group(cols ...field.Expr) IVersionDo
	Having(conds ...gen.Condition) IVersionDo
	Limit(limit int) IVersionDo
	Offset(offset int) IVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionDo
	Unscoped() IVersionDo
	Create(values ...*po.Version) error
	CreateInBatches(values []*po.Version, batchSize int) error
	Save(values ...*po.Version) error
	First() (*po.Version, error)
	Take() (*po.Version, error)
	Last() (*po.Version, error)
	Find() ([]*po.Version, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Version, err error)
	FindInBatches(result *[]*po.Version, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.Version) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVersionDo
	Assign(attrs ...field.AssignExpr) IVersionDo
	Joins(fields ...field.RelationField) IVersionDo
	Preload(fields ...field.RelationField) IVersionDo
	FirstOrInit() (*po.Version, error)
	FirstOrCreate() (*po.Version, error)
	FindByPage(offset int, limit int) (result []*po.Version, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v versionDo) Debug() IVersionDo {
	return v.withDO(v.DO.Debug())
}

func (v versionDo) WithContext(ctx context.Context) IVersionDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v versionDo) ReadDB() IVersionDo {
	return v.Clauses(dbresolver.Read)
}

func (v versionDo) WriteDB() IVersionDo {
	return v.Clauses(dbresolver.Write)
}

func (v versionDo) Session(config *gorm.Session) IVersionDo {
	return v.withDO(v.DO.Session(config))
}

func (v versionDo) Clauses(conds ...clause.Expression) IVersionDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v versionDo) Returning(value interface{}, columns ...string) IVersionDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v versionDo) Not(conds ...gen.Condition) IVersionDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v versionDo) Or(conds ...gen.Condition) IVersionDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v versionDo) Select(conds ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v versionDo) Where(conds ...gen.Condition) IVersionDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v versionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVersionDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v versionDo) Order(conds ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v versionDo) Distinct(cols ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v versionDo) Omit(cols ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v versionDo) Join(table schema.Tabler, on ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v versionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVersionDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v versionDo) RightJoin(table schema.Tabler, on ...field.Expr) IVersionDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v versionDo) Group(cols ...field.Expr) IVersionDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v versionDo) Having(conds ...gen.Condition) IVersionDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v versionDo) Limit(limit int) IVersionDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v versionDo) Offset(offset int) IVersionDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v versionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v versionDo) Unscoped() IVersionDo {
	return v.withDO(v.DO.Unscoped())
}

func (v versionDo) Create(values ...*po.Version) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v versionDo) CreateInBatches(values []*po.Version, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v versionDo) Save(values ...*po.Version) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v versionDo) First() (*po.Version, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.Version), nil
	}
}

func (v versionDo) Take() (*po.Version, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.Version), nil
	}
}

func (v versionDo) Last() (*po.Version, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.Version), nil
	}
}

func (v versionDo) Find() ([]*po.Version, error) {
	result, err := v.DO.Find()
	return result.([]*po.Version), err
}

func (v versionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Version, err error) {
	buf := make([]*po.Version, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v versionDo) FindInBatches(result *[]*po.Version, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v versionDo) Attrs(attrs ...field.AssignExpr) IVersionDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v versionDo) Assign(attrs ...field.AssignExpr) IVersionDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v versionDo) Joins(fields ...field.RelationField) IVersionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v versionDo) Preload(fields ...field.RelationField) IVersionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v versionDo) FirstOrInit() (*po.Version, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.Version), nil
	}
}

func (v versionDo) FirstOrCreate() (*po.Version, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.Version), nil
	}
}

func (v versionDo) FindByPage(offset int, limit int) (result []*po.Version, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v versionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v versionDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v versionDo) Delete(models ...*po.Version) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *versionDo) withDO(do gen.Dao) *versionDo {
	v.DO = *do.(*gen.DO)
	return v
}
